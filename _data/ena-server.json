[{
  "server": "https://www.ebi.ac.uk/ena/cram/",
  "total_tests_failed": 10,
  "total_tests": 30,
  "total_warnings": 19,
  "total_tests_passed": 11,
  "test_results": [{
    "test_description": "Test to check if info-endpoint returns 200 OK with appropriate headers",
    "parents": ["test_base_algorithm"],
    "result": 1,
    "text": "Info endpoint implemented by the server",
    "children": ["test_info_implement_default", "test_info_circular", "test_info_algorithms", "test_info_subsequence", "test_info_api_version"],
    "edge_cases": [],
    "name": "test_info_implement",
    "warning": false
  }, {
    "test_description": "Test to check if info-endpoint returns 200 OK without headers",
    "parents": ["test_info_implement"],
    "result": 1,
    "text": "Info endpoint implemented with default encoding",
    "children": [],
    "edge_cases": [],
    "name": "test_info_implement_default",
    "warning": false
  }, {
    "test_description": "Test to check if info-endpoint has circular in the response object. And if it is there it updates session_params['circular'] as per the value",
    "parents": ["test_info_implement"],
    "result": -1,
    "text": "\"circular\" key not in info response object. It sends None",
    "children": ["test_metadata_query_circular_sequence", "test_sequence_circular", "test_sequence_circular_support_false_errors", "test_sequence_circular_support_true_errors"],
    "edge_cases": [],
    "name": "test_info_circular",
    "warning": true
  }, {
    "test_description": "Test if metadata endpoint returns 200 using circular test sequence if the server supports circular sequences. Value stored in session_params. If not skip test and set skip text appropriately",
    "parents": ["test_metadata_implement", "test_info_circular"],
    "result": 0,
    "text": "test_metadata_query_circular_sequence is skipped because \"circular\" key not in info response object. It sends None",
    "children": [],
    "edge_cases": [],
    "name": "test_metadata_query_circular_sequence",
    "warning": true
  }, {
    "test_description": "Test to check if server passes all the edge cases related to circular queries",
    "parents": ["test_sequence_implement", "test_info_circular"],
    "result": 0,
    "text": "test_sequence_circular is skipped because \"circular\" key not in info response object. It sends None",
    "children": [],
    "edge_cases": [],
    "name": "test_sequence_circular",
    "warning": true
  }, {
    "test_description": "Test to check if server throws correct error codes on circular sequence query if server does not support circular sequences",
    "parents": ["test_sequence_implement", "test_info_circular"],
    "result": 0,
    "text": "test_sequence_circular_support_false_errors is skipped because \"circular\" key not in info response object. It sends None",
    "children": [],
    "edge_cases": [],
    "name": "test_sequence_circular_support_false_errors",
    "warning": true
  }, {
    "test_description": "Test to check if server throws correct error codes on circular sequence query if server supports circular sequences",
    "parents": ["test_sequence_implement", "test_info_circular"],
    "result": 0,
    "text": "test_sequence_circular_support_true_errors is skipped because \"circular\" key not in info response object. It sends None",
    "children": [],
    "edge_cases": [],
    "name": "test_sequence_circular_support_true_errors",
    "warning": true
  }, {
    "test_description": "Test to check if info-endpoint has algorithms in the response object. And if it is there it updates session_params['trunc512'] as per the value",
    "parents": ["test_info_implement"],
    "result": -1,
    "text": "\"algorithms\" key not in info response object. It sends None",
    "children": ["test_metadata_query_by_trunc512", "test_metadata_trunc512", "test_sequence_query_by_trunc512"],
    "edge_cases": [],
    "name": "test_info_algorithms",
    "warning": true
  }, {
    "test_description": "Test if metadata endpoint returns 200 using trunc512 with I test sequence if the server supports. Value stored in session_params. If not skip test and set skip text appropriately",
    "parents": ["test_metadata_implement", "test_info_algorithms"],
    "result": 0,
    "text": "test_metadata_query_by_trunc512 is skipped because \"algorithms\" key not in info response object. It sends None",
    "children": [],
    "edge_cases": [],
    "name": "test_metadata_query_by_trunc512",
    "warning": true
  }, {
    "test_description": "Test if trunc512 in metadata response object. Skip if server does not support trunc512",
    "parents": ["test_metadata_implement", "test_info_algorithms"],
    "result": 0,
    "text": "test_metadata_trunc512 is skipped because \"algorithms\" key not in info response object. It sends None",
    "children": [],
    "edge_cases": [],
    "name": "test_metadata_trunc512",
    "warning": true
  }, {
    "test_description": "Test to check if server returns 200 using I test sequence trunc512 and appropriate headers if the server supports trunc512",
    "parents": ["test_sequence_implement", "test_info_algorithms"],
    "result": 0,
    "text": "test_sequence_query_by_trunc512 is skipped because \"algorithms\" key not in info response object. It sends None",
    "children": [],
    "edge_cases": [],
    "name": "test_sequence_query_by_trunc512",
    "warning": true
  }, {
    "test_description": "Test to check if info-endpoint has subsequence_limit in the response object. If the key is present we update session_params['subsequence_limit'] as per the value",
    "parents": ["test_info_implement"],
    "result": -1,
    "text": "\"subsequence_limit\" key not in info response object. It sends None",
    "children": [],
    "edge_cases": [],
    "name": "test_info_subsequence",
    "warning": true
  }, {
    "test_description": "Test to check if info-endpoint has supported_api_versions in the response object.",
    "parents": ["test_info_implement"],
    "result": -1,
    "text": "supported_api_versions key not in info response object. It sends None",
    "children": [],
    "edge_cases": [],
    "name": "test_info_api_version",
    "warning": true
  }, {
    "test_description": "Test if metadata endpoint returns 200 with appropriate headers using I test sequence",
    "parents": ["test_base_algorithm"],
    "result": 1,
    "text": "Metadata endpoint implemented by the server",
    "children": ["test_metadata_implement_default", "test_metadata_query_by_trunc512", "test_metadata_query_circular_sequence", "test_metadata_md5", "test_metadata_trunc512", "test_metadata_length", "test_metadata_aliases", "test_metadata_invalid_checksum_404_error", "test_metadata_invalid_encoding_415_error"],
    "edge_cases": [],
    "name": "test_metadata_implement",
    "warning": false
  }, {
    "test_description": "Test if metadata endpoint returns 200 without headers using I test sequence",
    "parents": ["test_metadata_implement"],
    "result": 1,
    "text": "Metadata endpoint implemented with default encoding",
    "children": [],
    "edge_cases": [],
    "name": "test_metadata_implement_default",
    "warning": false
  }, {
    "test_description": "Test if md5 in metadata response object",
    "parents": ["test_metadata_implement"],
    "result": 1,
    "text": "md5 key in metadata response object",
    "children": [],
    "edge_cases": [],
    "name": "test_metadata_md5",
    "warning": false
  }, {
    "test_description": "Test if length in metadata response object",
    "parents": ["test_metadata_implement"],
    "result": 1,
    "text": "length key in metadata response object",
    "children": [],
    "edge_cases": [],
    "name": "test_metadata_length",
    "warning": false
  }, {
    "test_description": "Test if aliases in metadata response object",
    "parents": ["test_metadata_implement"],
    "result": 1,
    "text": "aliases key in metadata response object",
    "children": [],
    "edge_cases": [],
    "name": "test_metadata_aliases",
    "warning": false
  }, {
    "test_description": "Test if 404 on invalid checksum in metadata response",
    "parents": ["test_metadata_implement"],
    "result": -1,
    "text": "Server is not sending 404 on invalid checksum instead sends 406",
    "children": [],
    "edge_cases": [],
    "name": "test_metadata_invalid_checksum_404_error",
    "warning": true
  }, {
    "test_description": "Test if 415 on invalid encoding in Accept header",
    "parents": ["test_metadata_implement"],
    "result": -1,
    "text": "Server is not sending 415 on invalid encoding instead sends 406",
    "children": [],
    "edge_cases": [],
    "name": "test_metadata_invalid_encoding_415_error",
    "warning": true
  }, {
    "test_description": "Test to check if server returns 200 using I test sequence and appropriate headers",
    "parents": ["test_base_algorithm"],
    "result": 1,
    "text": "Sequence endpoint implemented in the server",
    "children": ["test_sequence_implement_default", "test_sequence_start_end", "test_sequence_range", "test_sequence_query_by_trunc512", "test_sequence_invalid_checksum_404_error", "test_sequence_invalid_encoding_415_error", "test_sequence_circular", "test_sequence_circular_support_false_errors", "test_sequence_circular_support_true_errors"],
    "edge_cases": [],
    "name": "test_sequence_implement",
    "warning": false
  }, {
    "test_description": "Test to check if server returns 200 using I test sequence and no headers",
    "parents": ["test_sequence_implement"],
    "result": 1,
    "text": "Sequence endpoint implemented with default encoding",
    "children": [],
    "edge_cases": [],
    "name": "test_sequence_implement_default",
    "warning": false
  }, {
    "test_description": "Test to check if server returns 200 and appropriate text using I test sequence and start/end query params set to 10 and 20 respectively",
    "parents": ["test_sequence_implement"],
    "result": -1,
    "text": "Server does not support start end query params",
    "children": ["test_sequence_start_end_success_cases", "test_sequence_start_end_errors"],
    "edge_cases": [],
    "name": "test_sequence_start_end",
    "warning": true
  }, {
    "test_description": "Test to check if server passes all the edge cases related to success queries using start/end params",
    "parents": ["test_sequence_start_end"],
    "result": 0,
    "text": "test_sequence_start_end_success_cases is skipped because Server does not support start end query params",
    "children": [],
    "edge_cases": [],
    "name": "test_sequence_start_end_success_cases",
    "warning": true
  }, {
    "test_description": "Test to check if server passes all the edge cases related start-end error cases",
    "parents": ["test_sequence_start_end"],
    "result": 0,
    "text": "test_sequence_start_end_errors is skipped because Server does not support start end query params",
    "children": [],
    "edge_cases": [],
    "name": "test_sequence_start_end_errors",
    "warning": true
  }, {
    "test_description": "Test to check if server returns 200 and appropriate text using I test sequence and range header set to 10 and 19 respectively",
    "parents": ["test_sequence_implement"],
    "result": 1,
    "text": "Server supports range header",
    "children": ["test_sequence_range_success_cases", "test_sequence_range_errors"],
    "edge_cases": [],
    "name": "test_sequence_range",
    "warning": false
  }, {
    "test_description": "Test to check if server passes all the edge cases related to range header success queries",
    "parents": ["test_sequence_range"],
    "result": -1,
    "text": "Server did not pass all the success edge cases with range header query. Check <a href=\"https://compliancedoc.readthedocs.io/en/latest/GET_sequence_API/success/#sub-sequence-queries\">https://compliancedoc.readthedocs.io/en/latest/GET_sequence_API/success/#sub-sequence-queries</a>",
    "children": [],
    "edge_cases": [{
      "api": "sequence/6681ac2f62509cfc220d78751b8dc524:bytes=10-19:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}",
      "result": 1
    }, {
      "api": "sequence/6681ac2f62509cfc220d78751b8dc524:bytes=10-230217:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}",
      "result": 1
    }, {
      "api": "sequence/6681ac2f62509cfc220d78751b8dc524:bytes=10-999999:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}",
      "result": 1
    }, {
      "api": "sequence/6681ac2f62509cfc220d78751b8dc524:bytes=0-230217:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}",
      "result": -1
    }, {
      "api": "sequence/6681ac2f62509cfc220d78751b8dc524:bytes=0-999999:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}",
      "result": -1
    }, {
      "api": "sequence/6681ac2f62509cfc220d78751b8dc524:bytes=0-0:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}",
      "result": 1
    }, {
      "api": "sequence/6681ac2f62509cfc220d78751b8dc524:bytes=230217-230217:{'Accept': 'text/vnd.ga4gh.refget.v1.0.0+plain'}",
      "result": 1
    }],
    "name": "test_sequence_range_success_cases",
    "warning": true
  }, {
    "test_description": "Test to check if server passes all the edge cases related range error cases",
    "parents": ["test_sequence_range"],
    "result": -1,
    "text": "Server is not correctly throwing errors for range error cases. Check <a href=\"https://compliancedoc.readthedocs.io/en/latest/GET_sequence_API/errors/#error-conditions-while-using-range-header\">https://compliancedoc.readthedocs.io/en/latest/GET_sequence_API/errors/#error-conditions-while-using-range-header</a>",
    "children": [],
    "edge_cases": [{
      "api": "6681ac2f62509cfc220d78751b8dc524:units=20-30",
      "result": -1
    }, {
      "api": "6681ac2f62509cfc220d78751b8dc524:bytes=ab-19",
      "result": -1
    }, {
      "api": "6681ac2f62509cfc220d78751b8dc524:bytes=-10--19",
      "result": -1
    }, {
      "api": "6681ac2f62509cfc220d78751b8dc524:bytes=10--19",
      "result": -1
    }, {
      "api": "6681ac2f62509cfc220d78751b8dc524:bytes=-10-",
      "result": -1
    }, {
      "api": "6681ac2f62509cfc220d78751b8dc524:bytes==10-19",
      "result": -1
    }, {
      "api": "3332ed720ac7eaa9b3655c06f6b9e196:bytes=5200-19",
      "result": -1
    }, {
      "api": "3332ed720ac7eaa9b3655c06f6b9e196:bytes=59-50",
      "result": -1
    }, {
      "api": "3332ed720ac7eaa9b3655c06f6b9e196:bytes=5385-5382",
      "result": -1
    }, {
      "api": "3332ed720ac7eaa9b3655c06f6b9e196:bytes=5387-5391",
      "result": -1
    }, {
      "api": "3332ed720ac7eaa9b3655c06f6b9e196:bytes=5386-5387",
      "result": -1
    }, {
      "api": "3332ed720ac7eaa9b3655c06f6b9e196:bytes=9999-99999",
      "result": -1
    }],
    "name": "test_sequence_range_errors",
    "warning": true
  }, {
    "test_description": "Test to check if server returns 404 using some garbage checksum and appropriate headers",
    "parents": ["test_sequence_implement"],
    "result": 1,
    "text": "Server is correctly sending 404 on invalid checksum",
    "children": [],
    "edge_cases": [],
    "name": "test_sequence_invalid_checksum_404_error",
    "warning": false
  }, {
    "test_description": "Test to check if server returns 200 using I test sequence and garbage encoding in Accept header",
    "parents": ["test_sequence_implement"],
    "result": -1,
    "text": "Server is not sending 415 on invalid encoding instead sends 200",
    "children": [],
    "edge_cases": [],
    "name": "test_sequence_invalid_encoding_415_error",
    "warning": true
  }],
  "date_time": "2018-09-24 18:06:11.381301",
  "high_level_summary": {
    "test_sequence_range": {
      "result": -1,
      "name": "test_sequence_range"
    },
    "test_info_implement": {
      "result": -1,
      "name": "test_info_implement"
    },
    "test_metadata_implement": {
      "result": 0,
      "name": "test_metadata_implement"
    },
    "test_sequence_implement": {
      "result": 0,
      "name": "test_sequence_implement"
    }
  },
  "total_tests_skipped": 9
}]